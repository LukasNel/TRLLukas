"""
This type stub file was generated by pyright.
"""

from types import ModuleType
from typing import Any

LIGER_KERNEL_MIN_VERSION = ...
_deepspeed_available = ...
_diffusers_available = ...
_fastapi_available = ...
_llm_blender_available = ...
_mergekit_available = ...
_pydantic_available = ...
_requests_available = ...
_rich_available = ...
_unsloth_available = ...
_uvicorn_available = ...
_vllm_available = ...
_vllm_ascend_available = ...
_joblib_available = ...
def is_deepspeed_available() -> bool:
    ...

def is_diffusers_available() -> bool:
    ...

def is_fastapi_available() -> bool:
    ...

def is_liger_kernel_available(min_version: str = ...) -> bool:
    ...

def is_llm_blender_available() -> bool:
    ...

def is_mergekit_available() -> bool:
    ...

def is_pydantic_available() -> bool:
    ...

def is_requests_available() -> bool:
    ...

def is_rich_available() -> bool:
    ...

def is_unsloth_available() -> bool:
    ...

def is_uvicorn_available() -> bool:
    ...

def is_vllm_available() -> bool:
    ...

def is_vllm_ascend_available() -> bool:
    ...

def is_joblib_available() -> bool:
    ...

class _LazyModule(ModuleType):
    """
    Module class that surfaces all objects but only performs associated imports when the objects are requested.
    """
    def __init__(self, name, module_file, import_structure, module_spec=..., extra_objects=...) -> None:
        ...
    
    def __dir__(self): # -> Iterable[str]:
        ...
    
    def __getattr__(self, name: str) -> Any:
        ...
    
    def __reduce__(self): # -> tuple[type[Self], tuple[Any, str | None, Any]]:
        ...
    


class OptionalDependencyNotAvailable(BaseException):
    """Internally used error class for signalling an optional dependency was not found."""
    ...


